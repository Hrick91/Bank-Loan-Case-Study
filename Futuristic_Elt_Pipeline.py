{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d9510619-e00a-4129-a10b-ab9b3b2582de",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Warnings: Just log them (safe to continue).\n",
    "Errors: Don‚Äôt just fail ‚Äî try automatic recovery strategies (e.g., retry, fallback, fix missing configs).\n",
    "Notes: log not only the error, but also what was done to fix it.\n",
    "This is how a futuristic ETL tool would behave in a company setting ‚Äî resilient, autonomous, and transparent.\n",
    "\"\"\"\n",
    "\"\"\"\n",
    "etl_tool.py\n",
    "Futuristic ETL loader for CSV/Excel ‚Üí SQL database\n",
    "- Supports: Local, AWS S3, GCS, Azure Blob\n",
    "- Self-heals common errors (retry, re-download, fallback)\n",
    "- Logs problems AND solutions in etl.log\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import tempfile\n",
    "import pandas as pd\n",
    "import yaml\n",
    "import logging\n",
    "import time\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "# Optional cloud libraries\n",
    "try:\n",
    "    import boto3  # AWS\n",
    "    from google.cloud import storage  # GCP\n",
    "    from azure.storage.blob import BlobServiceClient  # Azure\n",
    "except ImportError:\n",
    "    pass\n",
    "\n",
    "\n",
    "# Configure logging with timestamp\n",
    "logging.basicConfig(\n",
    "    filename=\"etl.log\",\n",
    "    level=logging.INFO,\n",
    "    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n",
    "    datefmt=\"%Y-%m-%d %H:%M:%S\"\n",
    ")\n",
    "\n",
    "\n",
    "class ETLTool:\n",
    "    def __init__(self, db_url):\n",
    "        try:\n",
    "            self.engine = create_engine(db_url)\n",
    "            logging.info(\"‚úÖ Initialized ETLTool with DB connection\")\n",
    "        except Exception as e:\n",
    "            logging.error(f\"‚ùå Database connection failed: {e}\")\n",
    "            raise\n",
    "\n",
    "    def ingest_db(self, df, table_name, if_exists=\"replace\"):\n",
    "        try:\n",
    "            df.to_sql(table_name, con=self.engine, if_exists=if_exists, index=False)\n",
    "            logging.info(f\"‚úÖ Ingested {table_name} ({df.shape[0]} rows, {df.shape[1]} cols)\")\n",
    "        except Exception as e:\n",
    "            logging.error(f\"‚ùå Failed to ingest {table_name}: {e}\")\n",
    "            # Recovery: Save locally so data is not lost\n",
    "            backup_path = f\"{table_name}_backup.csv\"\n",
    "            df.to_csv(backup_path, index=False)\n",
    "            logging.info(f\"üíæ Recovery: Saved {table_name} data locally at {backup_path}\")\n",
    "\n",
    "    def _process_file(self, file_path, table_name, if_exists=\"replace\"):\n",
    "        \"Process a single file with retry & self-healing\"\n",
    "        retries = 2\n",
    "        for attempt in range(retries):\n",
    "            try:\n",
    "                if file_path.lower().endswith(\".csv\"):\n",
    "                    df = pd.read_csv(file_path)\n",
    "                elif file_path.lower().endswith((\".xlsx\", \".xls\")):\n",
    "                    df = pd.read_excel(file_path)\n",
    "                else:\n",
    "                    logging.warning(f\"‚ö†Ô∏è Skipping unsupported file: {file_path}\")\n",
    "                    return\n",
    "\n",
    "                self.ingest_db(df, table_name, if_exists)\n",
    "                return  # success, exit loop\n",
    "\n",
    "            except Exception as e:\n",
    "                logging.error(f\"‚ùå Error processing {file_path}: {e}\")\n",
    "                if attempt < retries - 1:\n",
    "                    logging.info(f\"üîÑ Retrying {file_path} (attempt {attempt+2})...\")\n",
    "                    time.sleep(2)  # wait before retry\n",
    "                else:\n",
    "                    logging.error(f\"‚ùå Permanent failure on {file_path}\")\n",
    "                    note = f\"üìå Note: File {file_path} could not be ingested. Manual check required.\"\n",
    "                    logging.info(note)\n",
    "\n",
    "    def load_and_ingest_local(self, folder_path, if_exists=\"replace\"):\n",
    "        logging.info(f\"üìÇ Loading files from local folder: {folder_path}\")\n",
    "        if not os.path.exists(folder_path):\n",
    "            logging.error(f\"‚ùå Folder not found: {folder_path}\")\n",
    "            return\n",
    "        for file in os.listdir(folder_path):\n",
    "            file_path = os.path.join(folder_path, file)\n",
    "            table_name = os.path.splitext(file)[0]\n",
    "            self._process_file(file_path, table_name, if_exists)\n",
    "\n",
    "    # (S3, GCS, Azure ingestion methods would follow the same retry + recovery pattern)\n",
    "    # Example for S3:\n",
    "\n",
    "    def load_and_ingest_s3(self, bucket_name, prefix=\"\", if_exists=\"replace\"):\n",
    "        logging.info(f\"‚òÅÔ∏è Loading files from S3 bucket: {bucket_name}/{prefix}\")\n",
    "        s3 = boto3.client(\"s3\")\n",
    "        with tempfile.TemporaryDirectory() as tmpdir:\n",
    "            try:\n",
    "                response = s3.list_objects_v2(Bucket=bucket_name, Prefix=prefix)\n",
    "            except Exception as e:\n",
    "                logging.error(f\"‚ùå Could not access S3 bucket: {e}\")\n",
    "                return\n",
    "\n",
    "            for obj in response.get(\"Contents\", []):\n",
    "                key = obj[\"Key\"]\n",
    "                if key.endswith((\".csv\", \".xlsx\", \".xls\")):\n",
    "                    local_path = os.path.join(tmpdir, os.path.basename(key))\n",
    "                    try:\n",
    "                        s3.download_file(bucket_name, key, local_path)\n",
    "                        table_name = os.path.splitext(os.path.basename(key))[0]\n",
    "                        self._process_file(local_path, table_name, if_exists)\n",
    "                    except Exception as e:\n",
    "                        logging.error(f\"‚ùå Error downloading {key} from S3: {e}\")\n",
    "                        logging.info(\"üìå Note: Check S3 permissions or object path\")\n",
    "                        \n",
    "\n",
    "def run_etl(config_file=\"config.yaml\"):\n",
    "    with open(config_file, \"r\") as f:\n",
    "        config = yaml.safe_load(f)\n",
    "\n",
    "    etl = ETLTool(config[\"database\"][\"url\"])\n",
    "    source = config[\"source\"][\"type\"]\n",
    "\n",
    "    logging.info(f\"üöÄ Running ETL for source type: {source}\")\n",
    "\n",
    "    try:\n",
    "        if source == \"local\":\n",
    "            etl.load_and_ingest_local(config[\"source\"][\"folder_path\"])\n",
    "        elif source == \"s3\":\n",
    "            etl.load_and_ingest_s3(config[\"source\"][\"bucket_name\"], config[\"source\"].get(\"prefix\", \"\"))\n",
    "        elif source == \"gcs\":\n",
    "            etl.load_and_ingest_gcs(config[\"source\"][\"gcs_bucket\"], config[\"source\"].get(\"gcs_prefix\", \"\"))\n",
    "        elif source == \"azure\":\n",
    "            etl.load_and_ingest_azure(\n",
    "                conn_str=config[\"source\"][\"azure_conn_str\"],\n",
    "                container_name=config[\"source\"][\"azure_container\"],\n",
    "                prefix=config[\"source\"].get(\"azure_prefix\", \"\")\n",
    "            )\n",
    "        else:\n",
    "            logging.error(f\"‚ùå Unknown source type: {source}\")\n",
    "            raise ValueError(f\"Unknown source type: {source}\")\n",
    "\n",
    "    except Exception as e:\n",
    "        logging.error(f\"üí• ETL crashed: {e}\")\n",
    "        logging.info(\"üìå Note: Self-healing failed. Manual intervention required.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c98661c6-d0ce-403d-b900-769983a45e4a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
